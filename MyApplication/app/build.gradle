import org.apache.commons.io.FileUtils
import org.apache.commons.io.filefilter.FileFilterUtils

apply plugin: 'com.android.application'

android {
    compileSdkVersion 26
    defaultConfig {
        applicationId "com.example.cassandrahamiltion.myapplication"
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support:design:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.android.support:support-vector-drawable:26.1.0'
    // Firebase Authentication
    compile 'com.google.firebase:firebase-auth:11.8.0'

    // Google Sign In SDK (only required for Google Sign In)
    compile 'com.google.android.gms:play-services-auth:11.8.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
}


apply plugin: 'com.google.gms.google-services'

task DownloadAndExtractAssets(type: Copy) {
    def sourceUrls = ['https://s3-us-west-2.amazonaws.com/iink/assets/1.0.0/myscript-iink-recognition-diagram.zip',
                      'https://s3-us-west-2.amazonaws.com/iink/assets/1.0.0/myscript-iink-recognition-math.zip',
                      'https://s3-us-west-2.amazonaws.com/iink/assets/1.0.0/myscript-iink-recognition-text-en_US.zip']
    def temporaryDir = new File(projectDir, "build/assets")
    def zipDir = new File(temporaryDir, "zips")
    def mathConf = new File(projectDir, "src/main/assets/conf/math.conf")

    if (!mathConf.exists()) {
        temporaryDir.deleteOnExit()
        if (!temporaryDir.isDirectory())
            temporaryDir.mkdirs()

        if (!zipDir.isDirectory())
            zipDir.mkdirs()

        sourceUrls.each { sourceUrl ->
            ant.get(src: sourceUrl, dest: zipDir.getPath())
        }

        File[] zipFiles = FileUtils.listFiles(zipDir, FileFilterUtils.suffixFileFilter("zip"), FileFilterUtils.trueFileFilter())
        zipFiles.each { File zipFile ->
            from zipTree(zipFile)
            into temporaryDir
        }
    }
}

task CopyAssets(type: Copy, dependsOn: DownloadAndExtractAssets) {
    def recognitionAssetDir = new File(projectDir, "build/assets/recognition-assets/")
    def targetDir = new File(projectDir, "src/main/assets/")
    def mathConf = new File(targetDir, "conf/math.conf")

    if (!mathConf.exists()) {
        println "Copying downloaded assets from $recognitionAssetDir to $targetDir"
        from recognitionAssetDir
        into targetDir
    }
}

preBuild.dependsOn(CopyAssets)
